{
	"info": {
		"_postman_id": "52268ef5-3e1e-4104-8ef0-8e13dc5c0333",
		"name": "SpotifyAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36344234"
	},
	"item": [
		{
			"name": "GetNewReleases",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/browse/new-releases",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"browse",
						"new-releases"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreatePlaylist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status message is Created\", function(){\r",
							"    pm.response.to.have.status(\"Created\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check playlist name\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(\"Bianca's Playlist\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check playlist description\", function () {\r",
							"    pm.expect(jsonData.description).to.eql(\"New playlist description\")\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"Bianca's Playlist\",\r\n\"description\": \"New playlist description\",\r\n\"public\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/users/{{user_id}}/playlists",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"users",
						"{{user_id}}",
						"playlists"
					]
				}
			},
			"response": []
		},
		{
			"name": "AddSongsToPlaylist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(2001);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is Created\", function(){\r",
							"    pm.response.to.have.status(\"Created\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"uris\": [\r\n        \"spotify:track:6fhOjFfcxRKvzdtNw46KGr\"\r\n    ],\r\n    \"position\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"{{playlist_id}}",
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetArtist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check artist's name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"RAVA\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check if artist's popularity is between 50 and 60\", function () {\r",
							"    pm.expect(jsonData.popularity).to.be.a('number');\r",
							"    pm.expect(jsonData.popularity).to.be.within(50,60);\r",
							"});\r",
							"\r",
							"pm.test(\"Check artist's genres\", function () {\r",
							"    pm.expect(jsonData.genres).to.eql([\"romanian trap\"])\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/artists/6ocuMBOl5OFS3AViv3DnG6",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"artists",
						"6ocuMBOl5OFS3AViv3DnG6"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetCurrentUsersProfile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check user's name\", function (){\r",
							"    pm.expect(jsonData.display_name).to.eql(\"Bianca\");\r",
							"})\r",
							"\r",
							"pm.test(\"Check user's number of followers\", function () {\r",
							"    pm.expect(jsonData.followers.total).to.eql(0)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUsersSavedAlbum",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if the artist Lana Del Rey appears among the saved albums\", function () {\r",
							"    pm.expect(jsonData.items.some(item => item.album.artists.some(artist => artist.name === \"Lana Del Rey\"))).to.be.true;\r",
							"})\r",
							"\r",
							"pm.test(\"Check if the artist Rava appears among the saved albums\", function () {\r",
							"    pm.expect(jsonData.items.some(item => item.album.artists.some(artist => artist.name === \"RAVA\"))).to.be.true;\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/albums",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"albums"
					]
				}
			},
			"response": []
		},
		{
			"name": "SaveAlbums",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.text();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status('OK');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that response body is empty\", function () {\r",
							"    pm.expect(jsonData).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ids\": [\r\n        \"7cZxVrz4JkxEP4lVrqX9NS\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/albums",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"albums"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteUsersAlbums",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.text();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status('OK');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that response body is empty\", function () {\r",
							"    pm.expect(jsonData).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ids\": [\r\n        \"7cZxVrz4JkxEP4lVrqX9NS\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/albums",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"albums"
					]
				}
			},
			"response": []
		},
		{
			"name": "CheckUsersSavedAlbum",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response returns a true value\", function () {\r",
							"    pm.expect(jsonData[0]).to.be.true;\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/albums/contains?ids=7cZxVrz4JkxEP4lVrqX9NS",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"albums",
						"contains"
					],
					"query": [
						{
							"key": "ids",
							"value": "7cZxVrz4JkxEP4lVrqX9NS"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetCurrentUsersPlaylist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/playlists",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"playlists"
					]
				}
			},
			"response": []
		},
		{
			"name": "ChangePlaylistDetails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"})\r",
							";"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Updated Playlist Name\",\r\n    \"description\": \"Updated playlist description\",\r\n    \"public\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"{{playlist_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "playlist-modify-public playlist-read-private playlist-modify-private user-read-playback-state playlist-read-collaborative user-library-modify user-library-read",
				"type": "string"
			},
			{
				"key": "state",
				"value": "",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://accounts.spotify.com/authorize",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://accounts.spotify.com/api/token",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{Client Secret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{Client ID}}",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://oauth.pstmn.io/v1/browser-callback",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user_id",
			"value": "31host2hjuxdcapu7anmdedsdhxq",
			"type": "string"
		},
		{
			"key": "playlist_id",
			"value": "3mVQXQMXVWNoPhBfsUuWke",
			"type": "string"
		}
	]
}